// –ú–æ–∫–æ–≤—ã–π SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
import crypto from "crypto";
import type { SMSProvider, SMSResponse } from "./types";

export class MockSMSProvider implements SMSProvider {
  private sentMessages: Array<{
    phone: string;
    message: string;
    timestamp: Date;
    messageId: string;
  }> = [];

  async send(phone: string, message: string): Promise<SMSResponse> {
    const messageId = crypto.randomUUID();

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏ (50-200ms)
    await new Promise((resolve) =>
      setTimeout(resolve, Math.random() * 150 + 50),
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ç—ã —É–≤–∏–¥–∏—à—å OTP –∫–æ–¥ –∑–¥–µ—Å—å)
    console.log("\nüì± [MOCK SMS PROVIDER]");
    console.log("‚îú‚îÄ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:", phone);
    console.log("‚îú‚îÄ –°–æ–æ–±—â–µ–Ω–∏–µ:", message);
    console.log("‚îú‚îÄ ID:", messageId);
    console.log("‚îî‚îÄ –í—Ä–µ–º—è:", new Date().toLocaleString("ru-RU"));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –¥–µ–±–∞–≥–µ)
    this.sentMessages.push({
      phone,
      message,
      timestamp: new Date(),
      messageId,
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if (this.sentMessages.length > 100) {
      this.sentMessages = this.sentMessages.slice(-100);
    }

    return {
      success: true,
      messageId,
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  getLastMessage(phone?: string) {
    if (phone) {
      return this.sentMessages.filter((m) => m.phone === phone).slice(-1)[0];
    }
    return this.sentMessages.slice(-1)[0];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  getMessages(phone: string) {
    return this.sentMessages.filter((m) => m.phone === phone);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  clear() {
    this.sentMessages = [];
  }
}
